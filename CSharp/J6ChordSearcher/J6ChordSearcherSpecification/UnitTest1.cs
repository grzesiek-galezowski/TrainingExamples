using NUnit.Framework;
using Pychord;
using System.Text.RegularExpressions;

namespace J6ChordSearcherSpecification
{
  [TestFixture]
  public class ChordTranspositionTests
  {
    [TestCase("C", 0, "C")]
    [TestCase("C", 2, "D")]
    [TestCase("C", -2, "A#")]
    [TestCase("G", 5, "C")]
    [TestCase("Cm", 3, "D#m")]
    [TestCase("C7", 1, "C#7")]
    [TestCase("C/G", 2, "D/A")]
    [TestCase("D#7/G#", 1, "E7/A")]
    [TestCase("Dadd9/F#", -1, "C#add9/F")]
    [TestCase("C7b9", 4, "E7b9")]
    [TestCase("F#", 6, "C")]
    [TestCase("Bb", -3, "G")]
    [TestCase("A#m7", 7, "Fm7")]
    [TestCase("Cdim", 3, "D#dim")]
    [TestCase("Caug", -4, "G#aug")]
    [TestCase("C", 12, "C")]
    [TestCase("C", -12, "C")]
    [TestCase("Db", 1, "D")]
    [TestCase("B", 1, "C")]
    [TestCase("E", -1, "D#")]
    [TestCase("C", 0, "C")]
    [TestCase("C", 2, "D")]
    [TestCase("C", -2, "A#")]
    [TestCase("G", 5, "C")]
    [TestCase("Cm", 3, "D#m")]
    [TestCase("C7", 1, "C#7")]
    [TestCase("C/G", 2, "D/A")]
    [TestCase("D#7/G#", 1, "E7/A")]
    [TestCase("Dadd9/F#", -1, "C#add9/F")]
    [TestCase("C7b9", 4, "E7b9")]
    [TestCase("F#", 6, "C")]
    [TestCase("Bb", -3, "G")]
    [TestCase("A#m7", 7, "Fm7")]
    [TestCase("Cdim", 3, "D#dim")]
    [TestCase("Caug", -4, "G#aug")]
    [TestCase("C", 12, "C")]
    [TestCase("C", -12, "C")]
    [TestCase("Db", 1, "D")]
    [TestCase("B", 1, "C")]
    [TestCase("E", -1, "D#")]

    // Additional test cases for basic chords
    [TestCase("D", 3, "F")]
    [TestCase("E", -3, "C")]
    [TestCase("F", 4, "A")]
    [TestCase("G", -5, "C#")]
    [TestCase("A", 2, "B")]
    [TestCase("B", -2, "A")]
    [TestCase("C#", 1, "D")]
    [TestCase("D#", -1, "D")]
    [TestCase("F#", 3, "A")]
    [TestCase("G#", -4, "D#")]
    [TestCase("A#", 5, "D#")]
    [TestCase("B#", -1, "B")]

    // Test cases for minor chords
    [TestCase("Dm", 2, "Em")]
    [TestCase("Em", -2, "Dm")]
    [TestCase("Fm", 3, "G#m")]
    [TestCase("Gm", -3, "Em")]
    [TestCase("Am", 4, "C#m")]
    [TestCase("Bm", -4, "F#m")]
    [TestCase("C#m", 1, "Dm")]
    [TestCase("D#m", -1, "Dm")]
    [TestCase("F#m", 2, "G#m")]
    [TestCase("G#m", -2, "F#m")]
    [TestCase("A#m", 3, "Cm")]
    [TestCase("B#m", -3, "A#m")]

    // Test cases for seventh chords
    [TestCase("CM7", 2, "DM7")]
    [TestCase("Dm7", -2, "Cm7")]
    [TestCase("E7", 3, "G7")]
    [TestCase("FM7", -3, "D#M7")]
    [TestCase("G7", 4, "B7")]
    [TestCase("Am7", -4, "Em7")]
    [TestCase("B7", 1, "C7")]
    [TestCase("C#7", -1, "C7")]
    [TestCase("D#7", 2, "F7")]
    [TestCase("F#7", -2, "E7")]
    [TestCase("G#7", 3, "B7")]
    [TestCase("A#7", -3, "F#7")]

    // Test cases for extended chords
    [TestCase("C9", 2, "D9")]
    [TestCase("Dm9", -2, "Cm9")]
    [TestCase("E13", 3, "G13")]
    [TestCase("FM9", -3, "D#M9")]
    [TestCase("G7b9", 4, "B7b9")]
    [TestCase("Am11", -4, "Em11")]
    [TestCase("B7#9", 1, "C7#9")]
    [TestCase("C#7b13", -1, "C7b13")]
    [TestCase("D#7#11", 2, "F7#11")]
    [TestCase("F#7alt", -2, "E7alt")]
    [TestCase("G#7sus4", 3, "B7sus4")]
    [TestCase("A#7b5", -3, "F#7b5")]

    // Test cases for slash chords
    [TestCase("C/E", 2, "D/F#")]
    [TestCase("Dm/F", -2, "Cm/Eb")]
    [TestCase("E/G#", 3, "G/B")]
    [TestCase("F/A", -3, "D#/F#")]
    [TestCase("G/B", 4, "B/D#")]
    [TestCase("Am/C", -4, "Em/G")]
    [TestCase("B/D#", 1, "C/E")]
    [TestCase("C#/E#", -1, "C/E")]
    [TestCase("D#/F#", 2, "F/A")]
    [TestCase("F#/A#", -2, "E/G#")]
    [TestCase("G#/B#", 3, "B/D#")]
    [TestCase("A#/C#", -3, "F#/A")]

    // Test cases for altered chords
    [TestCase("Caug", 2, "Daug")]
    [TestCase("Ddim", -2, "Cdim")]
    [TestCase("Eaug7", 3, "Gaug7")]
    [TestCase("Fdim7", -3, "D#dim7")]
    [TestCase("Gaug9", 4, "Baug9")]
    [TestCase("Am7b5", -4, "Em7b5")]
    [TestCase("B7#5", 1, "C7#5")]
    [TestCase("C#m7b5", -1, "Cm7b5")]
    [TestCase("D#7alt", 2, "F7alt")]
    [TestCase("F#7b9", -2, "E7b9")]
    [TestCase("G#7#9", 3, "B7#9")]
    [TestCase("A#7b13", -3, "F#7b13")]

    // Test cases for sus chords
    [TestCase("Csus2", 2, "Dsus2")]
    [TestCase("Dsus4", -2, "Csus4")]
    [TestCase("Esus2", 3, "Gsus2")]
    [TestCase("Fsus4", -3, "D#sus4")]
    [TestCase("Gsus2", 4, "Bsus2")]
    [TestCase("Asus4", -4, "Esus4")]
    [TestCase("Bsus2", 1, "Csus2")]
    [TestCase("C#sus4", -1, "Csus4")]
    [TestCase("D#sus2", 2, "Fsus2")]
    [TestCase("F#sus4", -2, "Esus4")]
    [TestCase("G#sus2", 3, "Bsus2")]
    [TestCase("A#sus4", -3, "F#sus4")]

    // Test cases for add chords
    [TestCase("Cadd9", 2, "Dadd9")]
    [TestCase("Dadd11", -2, "Cadd11")]
    [TestCase("Eadd13", 3, "Gadd13")]
    [TestCase("Fadd9", -3, "D#add9")]
    [TestCase("Gadd11", 4, "Badd11")]
    [TestCase("Aadd13", -4, "Eadd13")]
    [TestCase("Badd9", 1, "Cadd9")]
    [TestCase("C#add11", -1, "Cadd11")]
    [TestCase("D#add13", 2, "Fadd13")]
    [TestCase("F#add9", -2, "Eadd9")]
    [TestCase("G#add11", 3, "Badd11")]
    [TestCase("A#add13", -3, "F#add13")]

    // Test cases for complex slash chords
    [TestCase("C7/E", 2, "D7/F#")]
    [TestCase("Dm7/F", -2, "Cm7/Eb")]
    [TestCase("E7/G#", 3, "G7/B")]
    [TestCase("FM7/A", -3, "D#M7/F#")]
    [TestCase("G7/B", 4, "B7/D#")]
    [TestCase("Am7/C", -4, "Em7/G")]
    [TestCase("B7/D#", 1, "C7/E")]
    [TestCase("C#7/E#", -1, "C7/E")]
    [TestCase("D#7/F#", 2, "F7/A")]
    [TestCase("F#7/A#", -2, "E7/G#")]
    [TestCase("G#7/B#", 3, "B7/D#")]
    [TestCase("A#7/C#", -3, "F#7/A")]

    // Test cases for extreme transpositions
    [TestCase("C", 24, "C")]
    [TestCase("C", -24, "C")]
    [TestCase("D", 36, "D")]
    [TestCase("D", -36, "D")]
    [TestCase("E", 48, "E")]
    [TestCase("E", -48, "E")]
    [TestCase("F", 60, "F")]
    [TestCase("F", -60, "F")]
    [TestCase("G", 72, "G")]
    [TestCase("G", -72, "G")]
    [TestCase("A", 84, "A")]
    [TestCase("A", -84, "A")]
    [TestCase("B", 96, "B")]
    [TestCase("B", -96, "B")]
    public void TransposeChord(string chord, int semitones, string expected)
    {
      var chord1 = new Chord(chord);
      chord1.Transpose(semitones);
      Assert.That(chord1.ChordName, Is.EqualTo(new Chord(expected).ChordName));
    }

  }
}
